### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum ACCIDENTSUBTYPE {
  Death
  SaviorBodilyInjury
  SlightBodilyInjury
}

type AccidentRecord {
  bodilyInjury: ACCIDENTSUBTYPE
  claims: Claim
  createdAt: DateTime
  id: String
  propertyInjury: Float
  updatedAt: DateTime
  vehicles: Vehicle
}

input AccidentRecordOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

type Branch {
  branchCode: String
  branchName: String
  certificates: [Certificate!]!
  city: String
  claimHitAndRuns: [ClaimHitAndRun!]!
  claimUnInsureds: [ClaimUnInsured!]!
  claims: [Claim!]!
  createdAt: DateTime
  hitAndRunPolicBranchs: [HitAndRunPoliceReport!]!
  hitAndRunPoliceReports: [HitAndRunPoliceReport!]!
  id: String
  insuredPoliceReports: [InsuredPoliceReport!]!
  insureds: [Insured!]!
  memberships: [Membership]
  mobileNumber: String
  organizations: Organization
  payments: [Payment]
  policeBranchs: [InsuredPoliceReport!]!
  region: String
  unInsuredPoliceReports: [UnInsuredPoliceReport!]!
  updatedAt: DateTime
  vehicles: [Vehicle]
}

type BranchGroupByRegion {
  branchCount: [BranchRegion]
}

input BranchOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

type BranchRegion {
  branchName: String
}

type BulkUpdateStatus {
  count: Int!
}

type Certificate {
  branchs: Branch
  certificateNumber: String
  certificateRecords: [CertificateRecord]
  claims: [Claim]
  id: String
  issuedDate: DateTime
  payments: [Payment!]
  policies: Policy
  premiumTarif: Float
  status: InsuranceStatus
  updatedAt: DateTime
  vehicles: Vehicle
}

type CertificateCountReport {
  count: Int!
}

input CertificateCreateInput {
  branchs: branchConnectInput
  policies: policyCreateInput
}

input CertificateOrderByInput {
  issuedDate: Sort
  policyExpireDate: Sort
  policyStartDate: Sort
  updatedAt: Sort
}

type CertificateRecord {
  branchs: [Branch]
  certificates: [Certificate]
  createdAt: DateTime
  id: String
  policies: [Policy]
  updatedAt: DateTime
  vehicles: [Vehicle]
}

input CertificateRecordOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

input CertificateUpdateInput {
  policies: policyUpdateInput
}

type Claim {
  accidentRecords: [AccidentRecord]
  branchs: Branch
  certificates: Certificate
  claimNumber: String
  claimStatus: ClaimProgress
  claimedAt: DateTime
  damageEstimate: Float
  id: String
  insuredPoliceReports: InsuredPoliceReport
  insureds: Insured
  updatedAt: DateTime
  vehicles: Vehicle
}

input ClaimCreateInput {
  branchs: branchConnectInput
  certificates: certificateConnectInput
  damageEstimate: Float
  insuredPoliceReports: InsuredPoliceReportConnectInput
  insureds: insuredConnectInput
  vehicles: vehicleConnectInput
}

type ClaimHitAndRun {
  branchs: Branch
  claimNumber: String
  claimedAt: DateTime
  claimerCity: String
  claimerFullName: String
  claimerPhoneNumber: String
  claimerRegion: String
  damageEstimate: Float
  hitAndRunPoliceReports: HitAndRunPoliceReport
  id: String
  updatedAt: DateTime
}

input ClaimHitAndRunConnectionInput {
  branchs: branchConnectInput
  claimerCity: String
  claimerFullName: String
  claimerPhoneNumber: String
  claimerRegion: String
  damageEstimate: Float
}

input ClaimHitAndRunCreateInput {
  branchs: branchConnectInput
  claimerCity: String
  claimerFullName: String
  claimerPhoneNumber: String
  claimerRegion: String
  damageEstimate: Float
  hitAndRunPoliceReports: hitAndRunPoliceReportConnectInput
}

input ClaimHitRunUpdateInput {
  claimerCity: String
  claimerFullName: String
  claimerPhoneNumber: String
  claimerRegion: String
  damageEstimate: Float
}

input ClaimOrderByInput {
  claimedAt: Sort
  updatedAt: Sort
}

enum ClaimProgress {
  Completed
  OnProgress
}

input ClaimStatusUpdateInput {
  accidentRecords: accidentCreateInput
}

type ClaimUnInsured {
  branchs: Branch
  claimNumber: String
  claimedAt: DateTime
  damageEstimate: Float
  id: String
  unInsuredPoliceReports: UnInsuredPoliceReport
  updatedAt: DateTime
  vehiclePlateNumber: String
}

input ClaimUnInsuredCreateInput {
  branchs: branchConnectInput
  damageEstimate: Float
  vehiclePlateNumber: String
}

input ClaimUpdateInput {
  damageEstimate: Float
}

type CodeList {
  code: String
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

enum CommissioningStatus {
  Commissioned
  NotCommissioned
}

type DailyReport {
  count: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type FeedAccidentRecord {
  accidentRecords: [AccidentRecord!]!
  maxPage: Int
  totalAccidentRecord: Int!
}

type FeedBranch {
  branchs: [Branch!]!
  maxPage: Int
  totalBranch: Int!
}

type FeedBranchByOrg {
  branchs: [Branch!]!
}

type FeedBranchByOrgDesc {
  branchs: [Branch!]!
}

type FeedBranchHead {
  branchs: [Branch!]!
}

type FeedBranchInsurer {
  branchs: [Branch!]!
  maxPage: Int
  totalBranch: Int!
}

type FeedCertificate {
  certificate: [Certificate!]!
  maxPage: Int
  totalCertificate: Int!
}

type FeedCertificateBranch {
  certificate: [Certificate!]!
  maxPage: Int
  totalCertificate: Int!
}

type FeedCertificateInsurer {
  certificate: [Certificate!]!
  maxPage: Int
  totalCertificate: Int!
}

type FeedCertificateRecord {
  certificateRecord: [CertificateRecord!]!
  maxPage: Int
  totalCertificateRecord: Int!
}

type FeedClaim {
  claim: [Claim!]!
  maxPage: Int
  totalClaim: Int!
}

type FeedClaimBranch {
  claim: [Claim!]!
  maxPage: Int
  totalClaim: Int!
}

type FeedClaimHitAndRun {
  claimHitAndRuns: [ClaimHitAndRun!]!
  maxPage: Int
  totalClaimHitAndRun: Int!
}

type FeedClaimInsurer {
  claim: [Claim!]!
  maxPage: Int
  totalClaim: Int!
}

type FeedClaimPoliceBranch {
  claim: [Claim!]!
  maxPage: Int
  totalClaim: Int!
}

type FeedClaimUnInsured {
  claimUnInsured: [ClaimUnInsured!]!
  maxPage: Int
  totalClaimUnInsured: Int!
}

type FeedClaimUnInsuredByPoliceBranch {
  claimUnInsured: [ClaimUnInsured!]!
  maxPage: Int
  totalClaimUnInsured: Int!
}

type FeedCodeList {
  codeList: [CodeList!]!
  maxPage: Int
  totalCodeList: Int!
}

type FeedHitAndRunPoliceReport {
  hitAndRunPoliceReport: [HitAndRunPoliceReport!]!
  maxPage: Int
  totalHitAndRunPoliceReport: Int!
}

type FeedHitAndRunReportPolice {
  hitAndRunPoliceReport: [HitAndRunPoliceReport!]!
  maxPage: Int
  totalHitAndRunPoliceReport: Int!
}

type FeedInsured {
  insured: [Insured!]!
  maxPage: Int
  totalInsured: Int!
}

type FeedInsuredBranch {
  insured: [Insured!]!
  maxPage: Int
  totalInsured: Int!
}

type FeedInsuredInsurer {
  insured: [Insured!]!
  maxPage: Int
  totalInsured: Int!
}

type FeedInsuredPoliceReport {
  insuredPoliceReports: [InsuredPoliceReport!]!
  maxPage: Int
  totalInsuredPoliceReport: Int!
}

type FeedInsuredPoliceReportBranch {
  insuredPoliceReports: [InsuredPoliceReport!]!
  maxPage: Int
  totalInsuredPoliceReport: Int!
}

type FeedInsuredPoliceReportByPolice {
  insuredPoliceReports: [InsuredPoliceReport!]!
  maxPage: Int
  totalInsuredPoliceReport: Int!
}

type FeedInsuredPoliceReportInsurer {
  insuredPoliceReports: [InsuredPoliceReport!]!
  maxPage: Int
  totalInsuredPoliceReport: Int!
}

type FeedInsuredPoliceReportPolice {
  insuredPoliceReports: [InsuredPoliceReport!]!
  maxPage: Int
  totalInsuredPoliceReport: Int!
}

type FeedMembership {
  maxPage: Int
  membership: [Membership!]!
  totalMembership: Int!
}

type FeedOrganization {
  maxPage: Int
  organizations: [Organization!]!
  totalOrganization: Int!
}

type FeedPayment {
  maxPage: Int
  payments: [Payment!]!
  totalPayments: Int!
}

type FeedPaymentBranchByStatus {
  maxPage: Int
  payments: [Payment!]!
  totalPayments: Int!
}

type FeedPaymentByStatus {
  maxPage: Int
  payments: [Payment!]!
  totalPayments: Int!
}

type FeedPaymentInsurerByStatus {
  maxPage: Int
  payments: [Payment!]!
  totalPayments: Int!
}

type FeedPolicy {
  maxPage: Int
  policy: [Policy!]!
  totalPolicy: Int!
}

type FeedRegionList {
  maxPage: Int
  regionList: [RegionList!]!
  totalRegionList: Int!
}

type FeedRoleByOrgDesc {
  membership: [Membership!]!
}

type FeedTariff {
  maxPage: Int
  tariff: [Tariff!]!
  totalTariff: Int!
}

type FeedTariffDetal {
  maxPage: Int
  tariffDetals: [TariffDetails!]!
  totalTariffDetals: Int!
}

type FeedThirdPartyLogs {
  maxPage: Int
  thirdPartyLogs: [ThirdPartyLog!]!
  totalThirdPartyLogs: Int!
}

type FeedUnInsuredPoliceReport {
  maxPage: Int
  totalUnInsuredPoliceReport: Int!
  unInsuredPoliceReports: [UnInsuredPoliceReport!]!
}

type FeedUnInsuredPoliceReportPolice {
  maxPage: Int
  totalUnInsuredPoliceReport: Int!
  unInsuredPoliceReports: [UnInsuredPoliceReport!]!
}

type FeedUniqueTariff {
  tariffVehicleCategory: [Tariff!]!
  tariffVehicleDetail: [Tariff!]!
  tariffVehicleSubType: [Tariff!]!
  tariffVehicleType: [Tariff!]!
  tariffVehicleUsage: [Tariff!]!
}

type FeedUser {
  maxPage: Int
  totalUser: Int!
  user: [User!]!
}

type FeedUserBranch {
  maxPage: Int
  totalUser: Int!
  user: [User!]!
}

type FeedUserInsurer {
  maxPage: Int
  totalUser: Int!
  user: [User!]!
}

type FeedVehicle {
  maxPage: Int
  totalVehicle: Int!
  vehicle: [Vehicle!]!
}

type FeedVehicleBranch {
  maxPage: Int
  totalVehicle: Int!
  vehicle: [Vehicle!]!
}

type FeedVehicleBranchByStatus {
  maxPage: Int
  totalVehicle: Int!
  vehicle: [Vehicle!]!
}

type FeedVehicleByInsured {
  vehicles: [Vehicle!]!
}

type FeedVehicleByInsuredReg {
  vehicles: [Vehicle!]!
}

type FeedVehicleByMobile {
  vehicles: [Vehicle!]!
}

type FeedVehicleByRegNumber {
  vehicles: [Vehicle!]!
}

type FeedVehicleByStatus {
  maxPage: Int
  totalVehicle: Int!
  vehicle: [Vehicle!]!
}

type FeedVehicleInsurer {
  maxPage: Int
  totalVehicle: Int!
  vehicle: [Vehicle!]!
}

type FeedVehicleInsurerByMobile {
  vehicles: [Vehicle!]!
}

type FeedVehicleInsurerByRegNumber {
  vehicles: [Vehicle!]!
}

type FeedVehicleInsurerByStatus {
  maxPage: Int
  totalVehicle: Int!
  vehicle: [Vehicle!]!
}

type FeedVictim {
  maxPage: Int
  totalVictim: Int!
  victim: [Victim!]!
}

type HitAndRunPoliceReport {
  branchs: Branch
  claimHitAndRuns: ClaimHitAndRun
  id: String
  incidentCause: String
  incidentDate: DateTime
  incidentNumber: String
  incidentPlace: String
  incidentTime: String
  policeBranch: Branch
  reportDate: DateTime
  trafficPolices: User
  victims: [Victim]
}

input HitAndRunPoliceReportOrderByInput {
  reportDate: Sort
}

enum InjuryType {
  CRITICAL
  DEATH
  SIMPLE
}

input InsuranceCreateInput {
  branchs: branchConnectInput
  policies: policyCreateInput
  vehicles: vehicleInsuranceCreateInput
}

input InsuranceImportCreateInput {
  bodyType: String
  branchs: branchConnectInput
  carryingCapacityInGoods: String
  chassisNumber: String
  city: String
  dutyFreeValue: Float
  dutyPaidValue: Float
  engineNumber: String
  firstName: String
  horsePower: String
  houseNumber: String
  kebelle: String
  lastName: String
  manufacturedYear: Int
  mobileNumber: String
  occupation: String
  passengerNumber: Int
  personsEntitledToUse: String
  plateNumber: String
  policyIssuedConditions: String
  policyStartDate: DateTime
  purchasedYear: Int
  region: String
  subCity: String
  vehicleCategory: VehicleCategory
  vehicleDetails: String
  vehicleModel: String
  vehicleStatus: VehicleStatus
  vehicleSubType: String
  vehicleType: String
  vehicleUsage: String
  wereda: String
}

enum InsuranceStatus {
  APPROVED
  PendingApproval
  PendingPayment
}

input InsuranceStatusInput {
  status: InsuranceStatus
}

type Insured {
  branchs: Branch
  city: String
  createdAt: DateTime
  firstName: String
  houseNumber: String
  id: String
  kebelle: String
  lastName: String
  mobileNumber: String
  occupation: String
  payments: [Payment!]
  regNumber: String
  region: String
  subCity: String
  updatedAt: DateTime
  vehicles: [Vehicle!]!
  wereda: String
}

input InsuredCreateInput {
  branchs: branchConnectInput
  city: String
  firstName: String
  houseNumber: String
  kebelle: String
  lastName: String
  mobileNumber: String
  occupation: String
  region: String
  subCity: String
  wereda: String
}

input InsuredOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

type InsuredPoliceReport {
  branchs: Branch
  claims: Claim
  id: String
  incidentCause: String
  incidentDate: DateTime
  incidentNumber: String
  incidentPlace: String
  incidentTime: String
  policeBranch: Branch
  reportDate: DateTime
  responsibleDriverName: String
  responsiblePhoneNumber: String
  trafficPolices: User
  vehicle_PoliceReport_responsibleVehicle: Vehicle
  vehicle_PoliceReport_victimVehicle: Vehicle
  victimCity: String
  victimDriverName: String
  victimHouseNo: String
  victimKebelle: String
  victimLevel: String
  victimLicenceNumber: String
  victimPhoneNumber: String
  victimRegion: String
  victimSubCity: String
  victimWereda: String
  victims: [Victim]
}

input InsuredPoliceReportConnectInput {
  incidentNumber: String
}

input InsuredPoliceReportOrderByInput {
  reportDate: Sort
}

input InsuredPoliceReportUpdateInput {
  incidentCause: String
  incidentDate: DateTime
  incidentPlace: String
  incidentTime: String
  responsibleDriverName: String
  responsiblePhoneNumber: String
  victimCity: String
  victimDriverName: String
  victimHouseNo: String
  victimKebelle: String
  victimLevel: String
  victimLicenceNumber: String
  victimPhoneNumber: String
  victimRegion: String
  victimSubCity: String
  victimWereda: String
}

enum IsInsured {
  INSURED
  NOTINSURED
  PENDING
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LogOrderByInput {
  timeStamp: Sort
}

type Membership {
  branchs: Branch
  createdAt: DateTime
  id: String
  role: MembershipRole
  updatedAt: DateTime
  users: User
}

enum MembershipRole {
  BRANCHADMIN
  INSURER
  MEMBER
  SUPERADMIN
  TRAFFICPOLICEADMIN
  TRAFFICPOLICEMEMBER
  USER
}

type Mutation {
  adminChangeUserPassword(id: String!, password: String!): User!
  bulkUpdateStatus(paymentRefNumber: [String]!): BulkUpdateStatus!
  changeUserPassword(currentPassword: String!, id: String!, password: String!): User!
  createBranch(input: branchCreateInput!): Branch!
  createCertificate(input: CertificateCreateInput!, plateNumber: String!): Certificate!
  createCertificateBranch(input: CertificateCreateInput!, plateNumber: String!): Certificate!
  createHitAndRunPoliceReport(input: hitAndRunCreateInput!): HitAndRunPoliceReport!
  createInsuranceByBranch(input: InsuranceCreateInput!): Certificate!
  createInsured(input: InsuredCreateInput!): Insured!
  createInsuredPoliceReport(input: insuredPoliceReportCreateInput!): InsuredPoliceReport!
  createOrUpdateCertificate(input: CertificateCreateInput!, plateNumber: String!): Certificate!
  createOrganization(input: organizationCreateInput!): Organization!
  createPolicy(input: PolicyCreateInput!): Policy!
  createTariff(input: TariffCreateInput!): Tariff!
  createUnInsuredPoliceReport(input: UnInsuredPoliceReportCreateInput!): UnInsuredPoliceReport!
  createUser(input: userCreateInput!): User!
  createVehicle(input: vehicleCreateInput!): Vehicle!
  createVictim(input: victimCreateInput!): Victim!
  deleteBranch(branchId: String!): Branch!
  deleteCertificate(id: String!): Certificate!
  deleteClaim(id: String!): Claim!
  deleteClaimHitAndRun(id: String!): ClaimHitAndRun!
  deleteHitRunPoliceReport(id: String!): HitAndRunPoliceReport!
  deleteInsured(id: String!): Insured!
  deleteInsuredPoliceReport(id: String!): InsuredPoliceReport!
  deleteOrganization(orgId: String!): Organization!
  deletePolicy(id: String!): Policy!
  deleteTariff(id: Int!): Tariff!
  deleteUnInsuredPoliceReport(id: String!): UnInsuredPoliceReport!
  deleteUser(id: String!): User!
  deleteVehicle(id: String!): Vehicle!
  deleteVictim(id: String!): Victim!
  transferCertificate(input: CertificateCreateInput!, plateNumber: String!): Certificate!
  updateBranch(id: String!, input: branchUpdateInput!): Branch!
  updateCertificate(id: String!, input: CertificateUpdateInput!): Certificate!
  updateClaim(id: String!, input: ClaimUpdateInput!): Claim!
  updateClaimHitAndRun(id: String!, input: ClaimHitRunUpdateInput!): ClaimHitAndRun!
  updateClaimHitAndRunDamageEstimate(damageEstimate: Float!, id: String!): ClaimHitAndRun!
  updateClaimStatus(id: String!, input: ClaimStatusUpdateInput!): Claim!
  updateDamageEstimate(claimNumber: String!, damageEstimate: Float!): Claim!
  updateHitAndRunPoliceReport(id: String!, input: hitAndRunUpdateInput!): HitAndRunPoliceReport!
  updateInsured(id: String!, input: insuredUpdateInput!): Insured!
  updateInsuredPoliceReport(id: String!, input: InsuredPoliceReportUpdateInput!): InsuredPoliceReport!
  updateOrganization(id: String!, input: organizationUpdateInput!): Organization!
  updatePaymentStatus(refNumber: String!): UpdatePaymentStatus!
  updatePolicy(id: String!, input: PolicyUpdateInput!): Policy!
  updatePremiumTariff(id: Int!, premiumTariff: Float!): Tariff!
  updateTariff(id: Int!, input: TariffUpdateInput!): Tariff!
  updateUnInsuredClaim(damageEstimate: Float!, id: String!): ClaimUnInsured!
  updateUnInsuredPoliceReport(id: String!, input: UnInsuredPoliceReportUpdateInput!): UnInsuredPoliceReport!
  updateUser(input: userUpdateInput!, userId: String!): User!
  updateVehicle(id: String!, input: vehicleUpdateInput!): Vehicle!
  updateVictim(id: String!, input: victimCreateInput!): Victim!
}

enum OrgDesc {
  INSURANCE
  MINISTRY
  TRAFFICPOLICE
}

type Organization {
  branchs: [Branch]
  city: String
  createdAt: DateTime
  description: OrgDesc
  id: String
  orgCode: String
  orgName: String
  region: String
  updatedAt: DateTime
}

input OrganizationOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

type Payment {
  branchs: Branch
  certificates: [Certificate]
  commissionStatus: CommissioningStatus
  createdAt: DateTime
  deletedAt: DateTime
  deletedStatus: Boolean
  id: String
  insureds: Insured
  paymentStatus: PaymentStatus
  premiumTarif: Float
  refNumber: String
  updatedAt: DateTime
}

input PaymentCreateInput {
  certificates: certificateConnectInput
  premiumTarif: Float
  vehicles: vehicleConnectInput
}

input PaymentOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

enum PaymentStatus {
  Paid
  PendingApproval
  PendingPayment
}

input PaymentStatusInput {
  paymentStatus: PaymentStatus
}

input PaymentUpdateInput {
  commissionStatus: CommissioningStatus
  paymentStatus: PaymentStatus
}

type Policy {
  certificates: Certificate
  createdAt: DateTime
  id: String
  personsEntitledToUse: String
  policyExpireDate: DateTime
  policyIssuedConditions: String
  policyNumber: String
  policyStartDate: DateTime
  updatedAt: DateTime
}

input PolicyCreateInput {
  personsEntitledToUse: String
  policyExpireDate: DateTime
  policyIssuedConditions: String
  policyNumber: String
  policyStartDate: DateTime
}

input PolicyOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

input PolicyUpdateInput {
  personsEntitledToUse: String
  policyExpireDate: DateTime
  policyIssuedConditions: String
  policyStartDate: DateTime
}

type Query {
  branchByCode(branchCode: String!): Branch!
  branchByName(branchName: String!): Branch!
  branchGroupByRegion: BranchGroupByRegion
  branchRoleList: [Membership!]!
  certificateByCertificateNumber(certificateNumber: String!): Certificate!
  claimByClaimNumber(claimNumber: String!): Claim!
  claimByID(id: String!): Claim!
  claimHitAndRunByClaimNumber(claimNumber: String!): ClaimHitAndRun!
  claimHitAndRunByID(id: String!): ClaimHitAndRun!
  claimUnInsuredByClaimNumber(claimNumber: String!): ClaimUnInsured!
  claimUnInsuredByID(id: String!): ClaimUnInsured!
  exportAdminPayment(dateFrom: String!, dateTo: String!, paymentStatus: PaymentStatus!): [Payment!]!
  exportBranch(dateFrom: String!, dateTo: String!): [Branch!]!
  exportBranchByInsurer(dateFrom: String!, dateTo: String!, orgId: String!): [Branch!]!
  exportBranchPayment(branchId: String!, dateFrom: String!, dateTo: String!, paymentStatus: PaymentStatus!): [Payment!]!
  exportCertificate(dateFrom: String!, dateTo: String!): [Certificate!]!
  exportCertificateBranch(branchId: String!, dateFrom: String!, dateTo: String!): [Certificate!]!
  exportCertificateInsurer(dateFrom: String!, dateTo: String!, orgId: String!): [Certificate!]!
  exportClaim(dateFrom: String!, dateTo: String!): [Claim!]!
  exportClaimBranch(branchId: String!, dateFrom: String!, dateTo: String!): [Claim!]!
  exportClaimInsurer(dateFrom: String!, dateTo: String!, orgId: String!): [Claim!]!
  exportHitAndRun(dateFrom: String!, dateTo: String!): [ClaimHitAndRun!]!
  exportHitAndRunBranch(branchId: String!, dateFrom: String!, dateTo: String!): [ClaimHitAndRun!]!
  exportHitAndRunInsurer(dateFrom: String!, dateTo: String!, orgId: String!): [ClaimHitAndRun!]!
  exportHitAndRunPoliceReport(dateFrom: String!, dateTo: String!): [HitAndRunPoliceReport!]!
  exportInsured(dateFrom: String!, dateTo: String!): [Insured!]!
  exportInsuredBranch(branchId: String!, dateFrom: String!, dateTo: String!): [Insured!]!
  exportInsuredInsurer(dateFrom: String!, dateTo: String!, orgId: String!): [Insured!]!
  exportInsuredPoliceReport(dateFrom: String!, dateTo: String!): [InsuredPoliceReport!]!
  exportInsuredPoliceReportBranch(branchId: String!, dateFrom: String!, dateTo: String!): [InsuredPoliceReport!]!
  exportInsuredPoliceReportInsurer(dateFrom: String!, dateTo: String!, orgId: String!): [InsuredPoliceReport!]!
  exportInsurerPayment(dateFrom: String!, dateTo: String!, orgId: String!, paymentStatus: PaymentStatus!): [Payment!]!
  exportOrganization(dateFrom: String!, dateTo: String!): [Organization!]!
  exportTariff(dateFrom: String!, dateTo: String!): [Tariff!]!
  exportThirdPartyLog(branchName: String, dateFrom: String!, dateTo: String!): [ThirdPartyLog!]!
  exportThirdPartyLogLog(action: String!, dateFrom: String!, dateTo: String!, mode: String!): [ThirdPartyLog!]!
  exportUnInsuredClaim(dateFrom: String!, dateTo: String!): [ClaimUnInsured!]!
  exportUnInsuredClaimBranch(branchId: String!, dateFrom: String!, dateTo: String!): [ClaimUnInsured!]!
  exportUnInsuredClaimInsurer(dateFrom: String!, dateTo: String!, orgId: String!): [ClaimUnInsured!]!
  exportUnInsuredPoliceReport(dateFrom: String!, dateTo: String!): [UnInsuredPoliceReport!]!
  exportUser(dateFrom: String!, dateTo: String!): [User!]!
  exportUserBranch(branchId: String!, dateFrom: String!, dateTo: String!): [User!]!
  exportUserInsurer(dateFrom: String!, dateTo: String!, orgId: String!): [User!]!
  exportVehicle(dateFrom: String!, dateTo: String!): [Vehicle!]!
  exportVehicleByBranch(branchId: String!, dateFrom: String!, dateTo: String!): [Vehicle!]!
  exportVehicleByInsurer(dateFrom: String!, dateTo: String!, orgId: String!): [Vehicle!]!
  feedAccidentRecord(filter: String, orderBy: [AccidentRecordOrderByInput!], skip: Int, take: Int): FeedAccidentRecord!
  feedBranch(filter: String, orderBy: [BranchOrderByInput!], skip: Int, take: Int): FeedBranch!
  feedBranchByOrg(orgId: String!): FeedBranchByOrg
  feedBranchByOrgDesc(input: orgDescInput!): FeedBranchByOrgDesc
  feedBranchInsurer(filter: String, orderBy: [BranchOrderByInput!], orgId: String!, skip: Int, take: Int): FeedBranchInsurer!
  feedCertificate(filter: String, orderBy: [CertificateOrderByInput!], skip: Int, take: Int): FeedCertificate!
  feedCertificateBranch(branchId: String!, filter: String, orderBy: [CertificateOrderByInput!], skip: Int, take: Int): FeedCertificateBranch!
  feedCertificateInsurer(filter: String, orderBy: [CertificateOrderByInput!], orgId: String!, skip: Int, take: Int): FeedCertificateInsurer!
  feedCertificateRecord(filter: String, orderBy: [CertificateRecordOrderByInput!], skip: Int, take: Int): FeedCertificateRecord!
  feedClaim(filter: String, orderBy: [ClaimOrderByInput!], skip: Int, take: Int): FeedClaim!
  feedClaimBranch(branchId: String!, filter: String, orderBy: [ClaimOrderByInput!], skip: Int, take: Int): FeedClaimBranch!
  feedClaimHitAndRun(filter: String, orderBy: [ClaimOrderByInput!], skip: Int, take: Int): FeedClaimHitAndRun!
  feedClaimHitAndRunByPolice(branchId: String!, filter: String, orderBy: [ClaimOrderByInput!], skip: Int, take: Int): FeedClaimHitAndRun!
  feedClaimInsurer(filter: String, orderBy: [ClaimOrderByInput!], orgId: String!, skip: Int, take: Int): FeedClaimInsurer!
  feedClaimPoliceBranch(branchId: String!, filter: String, orderBy: [ClaimOrderByInput!], skip: Int, take: Int): FeedClaimPoliceBranch!
  feedClaimUnInsured(filter: String, orderBy: [ClaimOrderByInput!], skip: Int, take: Int): FeedClaimUnInsured!
  feedClaimUnInsuredByPoliceBranch(branchId: String!, filter: String, orderBy: [ClaimOrderByInput!], skip: Int, take: Int): FeedClaimUnInsuredByPoliceBranch!
  feedHitAndRunPoliceReport(filter: String, orderBy: [HitAndRunPoliceReportOrderByInput!], skip: Int, take: Int): FeedHitAndRunPoliceReport!
  feedHitAndRunReportPolice(branchId: String!, filter: String, orderBy: [HitAndRunPoliceReportOrderByInput!], skip: Int, take: Int): FeedHitAndRunReportPolice!
  feedInsured(filter: String, orderBy: [InsuredOrderByInput!], skip: Int, take: Int): FeedInsured!
  feedInsuredBranch(branchId: String!, filter: String, orderBy: [InsuredOrderByInput!], skip: Int, take: Int): FeedInsuredBranch!
  feedInsuredInsurer(filter: String, orderBy: [InsuredOrderByInput!], orgId: String!, skip: Int, take: Int): FeedInsuredInsurer!
  feedInsuredPoliceReport(filter: String, orderBy: [InsuredPoliceReportOrderByInput!], skip: Int, take: Int): FeedInsuredPoliceReport!
  feedInsuredPoliceReportBranch(branchId: String!, filter: String, orderBy: [InsuredPoliceReportOrderByInput!], skip: Int, take: Int): FeedInsuredPoliceReportBranch!
  feedInsuredPoliceReportByPolice(branchId: String!, filter: String, orderBy: [InsuredPoliceReportOrderByInput!], skip: Int, take: Int): FeedInsuredPoliceReportByPolice!
  feedInsuredPoliceReportInsurer(filter: String, orderBy: [InsuredPoliceReportOrderByInput!], orgId: String!, skip: Int, take: Int): FeedInsuredPoliceReportInsurer!
  feedInsuredPoliceReportPolice(filter: String, orderBy: [InsuredPoliceReportOrderByInput!], orgId: String!, skip: Int, take: Int): FeedInsuredPoliceReportPolice!
  feedMembership(filter: String, orderBy: [UserOrderByInput!], skip: Int, take: Int): FeedMembership!
  feedOrganization(filter: String, orderBy: [OrganizationOrderByInput!], skip: Int, take: Int): FeedOrganization!
  feedPayment(filter: String, orderBy: [PaymentOrderByInput!], skip: Int, take: Int): FeedPayment!
  feedPaymentBranchByStatus(branchId: String!, filter: String, input: PaymentStatusInput!, orderBy: [PaymentOrderByInput!], skip: Int, take: Int): FeedPaymentBranchByStatus!
  feedPaymentByStatus(filter: String, input: PaymentStatusInput!, orderBy: [PaymentOrderByInput!], skip: Int, take: Int): FeedPaymentByStatus!
  feedPaymentInsurerByStatus(filter: String, input: PaymentStatusInput!, orderBy: [PaymentOrderByInput!], orgId: String!, skip: Int, take: Int): FeedPaymentInsurerByStatus!
  feedPlateCodeList: FeedCodeList!
  feedPolicy(filter: String, orderBy: [PolicyOrderByInput!], skip: Int, take: Int): FeedPolicy!
  feedRegionList: FeedRegionList!
  feedRoleByOrgDesc(input: orgRoleDescInput!): FeedRoleByOrgDesc
  feedTariff(filter: String, orderBy: [TariffOrderByInput!], skip: Int, take: Int): FeedTariff!
  feedTariffDetal(filter: String, orderBy: [TariffDetalOrderByInput!], skip: Int, take: Int): FeedTariffDetal!
  feedThirdPartyLogs(filter: String, orderBy: [LogOrderByInput!], skip: Int, take: Int): FeedThirdPartyLogs!
  feedUnInsuredPoliceReport(filter: String, orderBy: [UnInsuredPoliceReportOrderByInput!], skip: Int, take: Int): FeedUnInsuredPoliceReport!
  feedUnInsuredPoliceReportPolice(branchId: String!, filter: String, orderBy: [UnInsuredPoliceReportOrderByInput!], skip: Int, take: Int): FeedUnInsuredPoliceReportPolice!
  feedUniqueTariff: FeedUniqueTariff
  feedUser(filter: String, orderBy: [UserOrderByInput!], skip: Int, take: Int): FeedUser!
  feedUserBranch(branchId: String!, filter: String, orderBy: [UserOrderByInput!], skip: Int, take: Int): FeedUserBranch!
  feedUserInsurer(filter: String, orderBy: [UserOrderByInput!], orgId: String!, skip: Int, take: Int): FeedUserInsurer!
  feedVehicle(filter: String, orderBy: [VehicleOrderByInput!], skip: Int, take: Int): FeedVehicle!
  feedVehicleBranch(branchId: String!, filter: String, orderBy: [VehicleOrderByInput!], skip: Int, take: Int): FeedVehicleBranch!
  feedVehicleBranchByStatus(branchId: String!, filter: String, input: statusInput!, orderBy: [VehicleOrderByInput!], skip: Int, take: Int): FeedVehicleBranchByStatus!
  feedVehicleByInsured(mobileNumber: String!): FeedVehicleByInsured!
  feedVehicleByInsuredReg(orgId: String!, regNumber: String!): FeedVehicleByInsuredReg!
  feedVehicleByMobile(mobileNumber: String!): FeedVehicleByMobile!
  feedVehicleByRegNumber(regNumber: String!): FeedVehicleByRegNumber!
  feedVehicleInsurer(filter: String, orderBy: [VehicleOrderByInput!], orgId: String!, skip: Int, take: Int): FeedVehicleInsurer!
  feedVehicleInsurerByMobile(mobileNumber: String!, orgId: String!): FeedVehicleInsurerByMobile!
  feedVictim(filter: String, orderBy: [PolicyOrderByInput!], skip: Int, take: Int): FeedVictim!
  getVehicleByPlateNumber(plateNumber: String!): Vehicle
  groupVehicleByRegion: [Vehicle!]!
  hitAndRunByIncidentNumber(incidentNumber: String!): HitAndRunPoliceReport!
  incidentNumberToClaim(incidentNumber: String!): InsuredPoliceReport!
  insuredAdminByMobileNumber(mobileNumber: String!): Insured
  insuredAdminByRegNumber(regNumber: String!): Insured
  insuredBranchByMobileNumber(branchId: String!, mobileNumber: String!): Insured
  insuredBranchByRegNumber(branchId: String!, regNumber: String!): Insured
  insuredByID(id: String!): Insured!
  insuredByMobileNumber(mobileNumber: String!): Insured
  insuredInsurerByMobileNumber(mobileNumber: String!, orgId: String!): Insured
  insuredInsurerByRegNumber(orgId: String!, regNumber: String!): Insured
  insuredPoliceReportByIncidentNumber(incidentNumber: String!): InsuredPoliceReport!
  insuredcertificateCountReport(filter: String!, insuranceType: String!, reportFor: String!, vehicleSearch: String!): CertificateCountReport!
  listAllBranch: [Branch]
  listAllOrganization: [Organization]
  listInsuranceOrganization(description: OrgDesc!): [Organization]
  organizationByName(orgName: String!): Organization!
  paymentByID(id: String!): Payment!
  paymentByRef(refNumber: String!): Payment!
  plateCode: [CodeList!]!
  policeRoleList: [Membership!]!
  policyByID(id: String!): Policy!
  policyByPolicyNumber(policyNumber: String!): Policy!
  premiumTariffVehicle(vehicleDetail: String!, vehicleSubType: String!, vehicleType: String!, vehicleUsage: String!): Tariff
  regionCode: [RegionList!]!
  roleList: [Membership!]!
  tariffByID(id: Int!): Tariff!
  tariffVehicleSubType(vehicleType: String!): [TariffDetails!]!
  tariffVehicleType: [TariffDetails!]!
  tariffVehicleUsage(vehicleSubType: String!, vehicleType: String!): [TariffDetails!]!
  thirdPartyLogsByEmail(userEmail: String!): [ThirdPartyLog]
  thirdPartyLogsById(id: String!): ThirdPartyLog
  unInsuredPoliceReportByIncidentNumber(incidentNumber: String!): UnInsuredPoliceReport!
  userByEmail(email: String!): User!
  usersByID(userId: String!): User!
  vehicleBranchByPlateNumber(branchId: String!, plateNumber: String!): Vehicle
  vehicleByID(id: String!): Vehicle!
  vehicleByPlateNumber(plateNumber: String!): Vehicle
  vehicleInsurerByPlateNumber(orgId: String!, plateNumber: String!): Vehicle
  victimByID(id: String!): Victim!
  weeklyReport(filter: String!, insuranceType: String!, reportFor: String!, vehicleSearch: String!): WeeklyReport!
}

type RegionList {
  createdAt: DateTime
  id: Int
  regionApp: String
  regionName: String
}

enum STATUS {
  APPROVED
  SUSPENDED
  TRANSFERABLE
}

enum Sort {
  asc
  desc
}

type Tariff {
  createdAt: DateTime
  id: Int
  premiumTarif: Float
  updatedAt: DateTime
  vehicleCategory: VehicleCategory
  vehicleDetail: String
  vehicleSubType: String
  vehicleType: String
  vehicleUsage: String
}

input TariffCreateInput {
  premiumTarif: Float
  vehicleCategory: VehicleCategory
  vehicleDetail: String
  vehicleSubType: String
  vehicleType: String
  vehicleUsage: String
}

type TariffDetails {
  createdAt: DateTime
  id: String
  premium: Float
  updatedAt: DateTime
  usage: String
  vehicleDetail: String
  vehicleSubType: String
  vehicleType: String
}

input TariffDetalOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

input TariffOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

input TariffUpdateInput {
  premiumTarif: Float
  vehicleCategory: VehicleCategory
  vehicleDetail: String
  vehicleSubType: String
  vehicleType: String
  vehicleUsage: String
}

type ThirdPartyLog {
  action: String
  branchCon: Branch
  branchs: [Branch]
  certificates: [Certificate]
  claims: [Claim]
  id: String
  insuredPoliceReports: [InsuredPoliceReport]
  insureds: [Insured]
  memberships: [Membership]
  mode: String
  newValue: JSON
  oldValue: JSON
  organizations: [Organization]
  tariffs: [Tariff]
  timeStamp: DateTime
  userEmail: String
  users: [User]
  vehicles: [Vehicle]
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

enum USER_TYPE {
  ADMIN
  BRANCH
  INSURER
  TRAFFICPOLICE
  USER
}

type UnInsuredPoliceReport {
  branchs: Branch
  claimUnInsureds: ClaimUnInsured
  id: String
  incidentCause: String
  incidentDate: DateTime
  incidentNumber: String
  incidentPlace: String
  incidentTime: String
  policeBranch: Branch
  reportDate: DateTime
  responsibleDriverName: String
  responsiblePhoneNumber: String
  responsibleVehiclePlateNumber: String
  trafficPolices: User
  victimCity: String
  victimDriverName: String
  victimHouseNo: String
  victimKebelle: String
  victimLevel: String
  victimLicenceNumber: String
  victimPhoneNumber: String
  victimRegion: String
  victimSubCity: String
  victimVehiclePlateNumber: String
  victimWereda: String
  victims: [Victim]
}

input UnInsuredPoliceReportConnectInput {
  incidentNumber: String
}

input UnInsuredPoliceReportCreateInput {
  branchs: branchConnectInput
  claimUnInsureds: ClaimUnInsuredCreateInput
  incidentCause: String
  incidentDate: DateTime
  incidentPlace: String
  incidentTime: String
  policeBranch: branchConnectInput
  responsibleDriverName: String
  responsiblePhoneNumber: String
  responsibleVehiclePlateNumber: String
  trafficPolices: userInput
  victimCity: String
  victimDriverName: String
  victimHouseNo: String
  victimKebelle: String
  victimLevel: String
  victimLicenceNumber: String
  victimPhoneNumber: String
  victimRegion: String
  victimSubCity: String
  victimVehiclePlateNumber: String
  victimWereda: String
  victims: [victimCreateInput]
}

input UnInsuredPoliceReportOrderByInput {
  reportDate: Sort
}

input UnInsuredPoliceReportUpdateInput {
  incidentCause: String
  incidentDate: DateTime
  incidentPlace: String
  incidentTime: String
  responsibleDriverName: String
  responsiblePhoneNumber: String
  victimCity: String
  victimDriverName: String
  victimHouseNo: String
  victimKebelle: String
  victimLevel: String
  victimLicenceNumber: String
  victimPhoneNumber: String
  victimRegion: String
  victimSubCity: String
  victimWereda: String
}

type UpdatePaymentStatus {
  count: Int!
}

type User {
  adminRestPassword: Boolean
  city: String
  createdAt: DateTime
  email: String
  firstName: String
  hitAndRunPoliceReports: [HitAndRunPoliceReport]
  id: String
  insuredPoliceReports: [InsuredPoliceReport]
  lastName: String
  memberships: Membership
  mobileNumber: String
  password: String
  region: String
  role: USER_TYPE
  unInsuredPoliceReports: [UnInsuredPoliceReport]
  updatedAt: DateTime
}

input UserOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

type Vehicle {
  bodyType: String
  branchs: Branch
  carryingCapacityInGoods: String
  certificates: Certificate
  chassisNumber: String
  claims: [Claim]
  createdAt: DateTime
  dutyFreeValue: Float
  dutyPaidValue: Float
  engineNumber: String
  horsePower: String
  id: String
  insureds: Insured
  isInsured: IsInsured
  manufacturedYear: Int
  passengerNumber: Int
  plateNumber: String
  premiumTarif: Float
  purchasedYear: Int
  updatedAt: DateTime
  vehicleCategory: VehicleCategory
  vehicleDetails: String
  vehicleModel: String
  vehicleStatus: VehicleStatus
  vehicleSubType: String
  vehicleType: String
  vehicleUsage: String
}

enum VehicleCategory {
  BUSINESSUSE
  PRIVATEUSE
}

type VehicleImport {
  vehicle: [Vehicle!]!
}

input VehicleOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

enum VehicleStatus {
  ADDITIONAL
  NEW
  RENEWAL
}

type Victim {
  createdAt: DateTime
  hitAndRunPoliceReports: [HitAndRunPoliceReport]
  id: String
  injuryType: InjuryType
  insuredPoliceReports: [InsuredPoliceReport]
  updatedAt: DateTime
  victimAddress: String
  victimCondition: VictimedCondition
  victimFamilyPhoneNumber: String
  victimHospitalized: String
  victimName: String
}

enum VictimedCondition {
  ASSISTANT
  DRIVER
  PASSENGER
  PEDESTRIAN
}

type WeeklyReport {
  count: Int
}

input accidentCreateInput {
  bodilyInjury: ACCIDENTSUBTYPE
  propertyInjury: Float
}

input branchConnectInput {
  id: String
}

input branchCreateInput {
  branchCode: String
  branchName: String
  city: String
  mobileNumber: String
  organizations: organizationConnectInput
  region: String
}

input branchUpdateInput {
  branchCode: String
  branchName: String
  city: String
  mobileNumber: String
  region: String
}

input certificateConnectInput {
  certificateNumber: String
}

input certificateImportCreateInput {
  policies: policyCreateInput
}

input claimDamageInput {
  damageEstimate: Float
}

input hitAndRunCreateInput {
  branchs: branchConnectInput
  claimHitAndRuns: ClaimHitAndRunConnectionInput
  incidentCause: String
  incidentDate: DateTime
  incidentPlace: String
  incidentTime: String
  policeBranch: branchConnectInput
  trafficPolices: userInput
  victims: [victimCreateInput]
}

input hitAndRunPoliceReportConnectInput {
  incidentNumber: String
}

input hitAndRunUpdateInput {
  incidentCause: String
  incidentDate: DateTime
  incidentPlace: String
  incidentTime: String
}

input insuredConnectInput {
  id: String
}

input insuredInsuranceCreateInput {
  city: String
  firstName: String
  houseNumber: String
  kebelle: String
  lastName: String
  mobileNumber: String
  occupation: String
  region: String
  subCity: String
  wereda: String
}

input insuredInsuranceImportConnectInput {
  regNumber: String
}

input insuredInsuranceImportInput {
  city: String
  firstName: String
  houseNumber: String
  kebelle: String
  lastName: String
  mobileNumber: String
  occupation: String
  region: String
  subCity: String
  wereda: String
}

input insuredMobileInput {
  mobileNumber: String
}

input insuredPoliceReportCreateInput {
  claims: claimDamageInput
  incidentCause: String
  incidentDate: DateTime
  incidentPlace: String
  incidentTime: String
  policeBranch: branchConnectInput
  responsibleDriverName: String
  responsiblePhoneNumber: String
  trafficPolices: userInput
  vehicle_PoliceReport_responsibleVehicle: responsibleVehicleConnectInput
  vehicle_PoliceReport_victimVehicle: vehicleConnectInput
  victimCity: String
  victimDriverName: String
  victimHouseNo: String
  victimKebelle: String
  victimLevel: String
  victimLicenceNumber: String
  victimPhoneNumber: String
  victimRegion: String
  victimSubCity: String
  victimWereda: String
  victims: [victimCreateInput]
}

input insuredRegConnectInput {
  regNumber: String
}

input insuredUpdateInput {
  city: String
  firstName: String
  houseNumber: String
  kebelle: String
  lastName: String
  mobileNumber: String
  occupation: String
  region: String
  subCity: String
  wereda: String
}

input membershipConnectInput {
  role: MembershipRole
}

input membershipCreateInput {
  branchs: branchConnectInput
  role: MembershipRole
}

input operationLogStatusInput {
  action: String!
  newValue: JSON!
  oldValue: JSON!
}

input orgDescInput {
  description: OrgDesc
}

input orgRoleDescInput {
  description: OrgDesc
}

input organizationConnectInput {
  id: String
}

input organizationCreateInput {
  city: String
  description: OrgDesc
  orgCode: String
  orgName: String
  region: String
}

input organizationUpdateInput {
  city: String
  orgName: String
  region: String
}

input policyConnectInput {
  policyNumber: String
}

input policyCreateInput {
  personsEntitledToUse: String
  policyIssuedConditions: String
  policyStartDate: DateTime
}

input policyInsuranceCreateInput {
  personsEntitledToUse: String
  policyIssuedConditions: String
  policyStartDate: DateTime
}

input policyUpdateInput {
  personsEntitledToUse: String
  policyIssuedConditions: String
  policyStartDate: DateTime
}

input responsibleVehicleConnectInput {
  plateNumber: String
}

input statusInput {
  status: STATUS
}

input tariffConnectInput {
  tariffCode: String
}

input thirdPartyLogCreateInput {
  newValue: JSON
}

input thirdPartyLogDeleteInput {
  oldValue: JSON
}

input thirdPartyLogEditInput {
  newValue: JSON
  oldValue: JSON
}

input thirdPartyLogInput {
  action: String
  mode: String
  newValue: JSON
  oldValue: JSON
  userEmail: String
}

input userConnectInput {
  mobileNumber: String!
}

input userCreateInput {
  city: String
  email: String
  firstName: String
  lastName: String
  memberships: membershipCreateInput
  mobileNumber: String
  password: String
  region: String
}

input userInput {
  id: String!
}

input userUpdateInput {
  city: String
  email: String
  firstName: String
  lastName: String
  memberships: membershipConnectInput
  mobileNumber: String
  region: String
}

input vehicleConnectInput {
  plateNumber: String
}

input vehicleCreateInput {
  bodyType: String
  branchs: branchConnectInput
  carryingCapacityInGoods: String
  chassisNumber: String
  dutyFreeValue: Float
  dutyPaidValue: Float
  engineNumber: String
  horsePower: String
  insureds: insuredConnectInput
  manufacturedYear: Int
  passengerNumber: Int
  plateNumber: String
  purchasedYear: Int
  vehicleCategory: VehicleCategory
  vehicleDetails: String
  vehicleModel: String
  vehicleStatus: VehicleStatus
  vehicleSubType: String
  vehicleType: String
  vehicleUsage: String
}

input vehicleInsuranceCreateInput {
  bodyType: String
  carryingCapacityInGoods: String
  chassisNumber: String
  dutyFreeValue: Float
  dutyPaidValue: Float
  engineNumber: String
  horsePower: String
  insureds: insuredInsuranceCreateInput
  manufacturedYear: Int
  passengerNumber: Int
  plateNumber: String
  premiumTarif: Float
  purchasedYear: Int
  vehicleCategory: VehicleCategory
  vehicleDetails: String
  vehicleModel: String
  vehicleStatus: VehicleStatus
  vehicleSubType: String
  vehicleType: String
  vehicleUsage: String
}

input vehicleUpdateConnectionInput {
  plateNumber: String
}

input vehicleUpdateInput {
  bodyType: String
  carryingCapacityInGoods: String
  dutyFreeValue: Float
  dutyPaidValue: Float
  horsePower: String
  manufacturedYear: Int
  passengerNumber: Int
  plateNumber: String
  purchasedYear: Int
  vehicleCategory: VehicleCategory
  vehicleDetails: String
  vehicleModel: String
  vehicleStatus: VehicleStatus
  vehicleSubType: String
  vehicleType: String
  vehicleUsage: String
}

input victimCreateInput {
  injuryType: InjuryType
  victimAddress: String
  victimCondition: VictimedCondition
  victimFamilyPhoneNumber: String
  victimHospitalized: String
  victimName: String
}